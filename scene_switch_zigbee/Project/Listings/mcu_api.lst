C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MCU_API
OBJECT MODULE PLACED IN .\Objects\mcu_api.obj
COMPILER INVOKED BY: d:\cccc2020\TOOL\Keil\C51\BIN\C51.EXE ..\User\mcu_api.c OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\mcu_api.lst) TABS(2) OBJECT(.\Objects\mcu_api.obj)

line level    source

   1          /**
   2          * @file  mcu_api.c
   3          * @brief this file contains basic fuctions and DP data report fucntion which is base on DP type
   4          * @author luchao
   5          * @date 2020.03.13
   6          * @par email:
   7          * luchao@tuya.com
   8          * @copyright HANGZHOU TUYA INFORMATION TECHNOLOGY CO.,LTD
   9          * @par company
  10          * http://www.tuya.com
  11          */
  12          
  13          #include "zigbee.h"
  14          
  15          /**
  16          * @brief hex translate to bcd 
  17          * @param[in] {Value_H} higher bits data 
  18          * @param[in] {Value_L} lower bits data
  19          * @return  bcd type data
  20          */
  21          unsigned char hex_to_bcd(unsigned char Value_H,unsigned char Value_L)
  22          {
  23   1        unsigned char bcd_value;
  24   1        
  25   1        if((Value_H >= '0') && (Value_H <= '9')){
  26   2          Value_H -= '0';
  27   2        }
  28   1        else if((Value_H >= 'A') && (Value_H <= 'F')){
  29   2          Value_H = Value_H - 'A' + 10;
  30   2        }
  31   1        else if((Value_H >= 'a') && (Value_H <= 'f')){
  32   2          Value_H = Value_H - 'a' + 10;
  33   2        }
  34   1      
  35   1        bcd_value = Value_H & 0x0f;
  36   1        bcd_value <<= 4;
  37   1      
  38   1        if((Value_L >= '0') && (Value_L <= '9')){
  39   2          Value_L -= '0';
  40   2        }
  41   1        else if((Value_L >= 'A') && (Value_L <= 'F')){
  42   2          Value_L = Value_L - 'a' + 10;
  43   2        }
  44   1        else if((Value_L >= 'a') && (Value_L <= 'f')){
  45   2          Value_L = Value_L - 'a' + 10;
  46   2        }
  47   1        
  48   1        bcd_value |= Value_L & 0x0f;
  49   1      
  50   1        return bcd_value;
  51   1      }
  52          
  53          /**
  54          * @brief get string len 
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 2   

  55          * @param[in] {str} higher bits data 
  56          * @return string len 
  57          */
  58          unsigned long my_strlen(unsigned char *str)  
  59          {
  60   1        unsigned long len = 0;
  61   1        if(str == NULL){ 
  62   2          return NULL;
  63   2        }
  64   1        
  65   1        for(len = 0; *str ++ != '\0'; ){
  66   2          len ++;
  67   2        }
  68   1        
  69   1        return len;
  70   1      }
  71          
  72          /**
  73          * @brief  assign ch to the first count bytes of the memory address src
  74          * @param[in] {src}    srouce address
  75          * @param[in] {ch}     set value 
  76          * @param[in] {count}  length of set address 
  77          * @return void
  78          */
  79          void *my_memset(void *src,unsigned char ch,unsigned short count)
  80          {
  81   1        unsigned char *tmp = (unsigned char *)src;
  82   1        if(src == NULL){
  83   2          return NULL;
  84   2        }
  85   1        
  86   1        while(count --){
  87   2          *tmp ++ = ch;
  88   2        }
  89   1        return src;
  90   1      }
  91          
  92          /**
  93          * @brief copy count bytes data from src to dest
  94          * @param[in] {src}    srouce address
  95          * @param[in] {dest}   destination address
  96          * @param[in] {count}  length of copy data
  97          * @return void
  98          */
  99          void *my_memcpy(void *dest, const void *src, unsigned short count)  
 100          {  
 101   1        unsigned char *pdest = (unsigned char *)dest;  
 102   1        const unsigned char *psrc  = (const unsigned char *)src;  
 103   1        unsigned short i;
 104   1        
 105   1        if(dest == NULL || src == NULL){ 
 106   2          return NULL;
 107   2        }
 108   1        
 109   1        if((pdest <= psrc) || (pdest > psrc + count)){  
 110   2          for(i = 0; i < count; i ++){  
 111   3            pdest[i] = psrc[i];  
 112   3          }  
 113   2        }
 114   1        else{
 115   2          for(i = count; i > 0; i --){  
 116   3            pdest[i - 1] = psrc[i - 1];  
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 3   

 117   3          }  
 118   2        }  
 119   1        
 120   1        return dest;  
 121   1      }
 122          
 123          /**
 124          * @brief copy string src to string dest
 125          * @param[in] {src}    srouce address
 126          * @param[in] {dest}   destination address
 127          * @return the tail of destination 
 128          */
 129          char *my_strcpy(char *dest, const char *src)  
 130          {
 131   1        char *p = dest;
 132   1        while(*src!='\0'){
 133   2          *dest++ = *src++;
 134   2        }
 135   1        *dest = '\0';
 136   1        return p;
 137   1      }
 138          
 139          /**
 140          * @brief compare string s1 with string s2
 141          * @param[in] {s1}  srouce address
 142          * @param[in] {s2}  destination address
 143          * @return compare result
 144          */
 145          int my_strcmp(char *s1 , char *s2)
 146          {
 147   1        while( *s1 && *s2 && *s1 == *s2 ){
 148   2          s1++;
 149   2          s2++;
 150   2        }
 151   1        return *s1 - *s2;
 152   1      }
 153          
 154          /**
 155          * @brief int translate to byte
 156          * @param[in] {number} int data 
 157          * @param[out] {value} the result array     
 158          * @return void
 159          */
 160          void int_to_byte(unsigned long number,unsigned char value[4])
 161          {
 162   1        value[0] = number >> 24;
 163   1        value[1] = number >> 16;
 164   1        value[2] = number >> 8;
 165   1        value[3] = number & 0xff;
 166   1      }
 167          
 168          /**
 169          * @brief byte data translate to int 
 170          * @param[in] {value}  the byte array 
 171          * @return result of int data 
 172          */
 173          unsigned long byte_to_int(const unsigned char value[4])
 174          {
 175   1        unsigned long nubmer = 0;
 176   1      
 177   1        nubmer = (unsigned long)value[0];
 178   1        nubmer <<= 8;
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 4   

 179   1        nubmer |= (unsigned long)value[1];
 180   1        nubmer <<= 8;
 181   1        nubmer |= (unsigned long)value[2];
 182   1        nubmer <<= 8;
 183   1        nubmer |= (unsigned long)value[3];
 184   1        
 185   1        return nubmer;
 186   1      }
 187          
 188          
 189          /**
 190          * @brief report bool type DP data to zigbee module 
 191          * @param[in]  {dpid}  dp id
 192          * @param[in]  {value} Data contents of dp 
 193          * @return send result 
 194          */
 195          unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
 196          {
 197   1        unsigned short length = 0;
 198   1        
 199   1        length = set_zigbee_uart_byte(length,dpid);
 200   1        length = set_zigbee_uart_byte(length,DP_TYPE_BOOL);
 201   1       
 202   1        length = set_zigbee_uart_byte(length,0);
 203   1        length = set_zigbee_uart_byte(length,1);
 204   1      
 205   1        if(value == FALSE){
 206   2          length = set_zigbee_uart_byte(length,FALSE);
 207   2        }
 208   1        else{
 209   2          length = set_zigbee_uart_byte(length,1);
 210   2        }
 211   1        
 212   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 213   1        
 214   1        return SUCCESS;
 215   1      }
 216          
 217          
 218          /**
 219          * @brief report enum type DP data to zigbee module 
 220          * @param[in]  {dpid}  dp id
 221          * @param[in]  {value} Data contents of dp 
 222          * @return send result 
 223          */
 224          unsigned char mcu_dp_enum_update(unsigned char dpid,unsigned char value)
 225          {
 226   1        unsigned short length = 0;
 227   1        
 228   1        length = set_zigbee_uart_byte(length,dpid);
 229   1        length = set_zigbee_uart_byte(length,DP_TYPE_ENUM);
 230   1        //
 231   1        length = set_zigbee_uart_byte(length,0);
 232   1        length = set_zigbee_uart_byte(length,1);
 233   1        //
 234   1        length = set_zigbee_uart_byte(length,value);
 235   1        
 236   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 237   1        
 238   1        return SUCCESS;
 239   1      }
 240          
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 5   

 241          
 242          /**
 243          * @brief report bitmap type DP data to zigbee module 
 244          * @param[in]  {dpid}  dp id
 245          * @param[in]  {value} Data contents of dp 
 246          * @return send result 
 247          */
 248          unsigned char mcu_dp_bitmap_update(unsigned char dpid,unsigned long value)
 249          {
 250   1        unsigned short length = 0;
 251   1      
 252   1        length = set_zigbee_uart_byte(length,dpid);
 253   1        length = set_zigbee_uart_byte(length,DP_TYPE_BITMAP);
 254   1        //
 255   1        length = set_zigbee_uart_byte(length,0);
 256   1        
 257   1        if((value | 0xff) == 0xff){
 258   2          length = set_zigbee_uart_byte(length,1);
 259   2          length = set_zigbee_uart_byte(length,value);
 260   2        }
 261   1        else if((value | 0xffff) == 0xffff){
 262   2          length = set_zigbee_uart_byte(length,2);
 263   2          length = set_zigbee_uart_byte(length,value >> 8);
 264   2          length = set_zigbee_uart_byte(length,value & 0xff);
 265   2        }
 266   1        else{
 267   2          length = set_zigbee_uart_byte(length,4);
 268   2          length = set_zigbee_uart_byte(length,value >> 24);
 269   2          length = set_zigbee_uart_byte(length,value >> 16);
 270   2          length = set_zigbee_uart_byte(length,value >> 8);
 271   2          length = set_zigbee_uart_byte(length,value & 0xff);
 272   2        }    
 273   1        
 274   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 275   1      
 276   1        return SUCCESS;
 277   1      }
 278          
 279          
 280          /**
 281          * @brief report fault type DP data to zigbee module 
 282          * @param[in]  {dpid}  dp id
 283          * @param[in]  {value} Data contents of dp 
 284          * @return send result 
 285          */
 286          unsigned char mcu_dp_fault_update(unsigned char dpid,unsigned long value)
 287          {
 288   1        unsigned short length = 0;
 289   1      
 290   1        length = set_zigbee_uart_byte(length,dpid);
 291   1        length = set_zigbee_uart_byte(length,DP_TYPE_BITMAP);
 292   1        //
 293   1        length = set_zigbee_uart_byte(length,0);
 294   1        
 295   1        if((value | 0xff) == 0xff){
 296   2          length = set_zigbee_uart_byte(length,1);
 297   2          length = set_zigbee_uart_byte(length,value);
 298   2        }
 299   1        else if((value | 0xffff) == 0xffff){
 300   2          length = set_zigbee_uart_byte(length,2);
 301   2          length = set_zigbee_uart_byte(length,value >> 8);
 302   2          length = set_zigbee_uart_byte(length,value & 0xff);
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 6   

 303   2        }
 304   1        else{
 305   2          length = set_zigbee_uart_byte(length,4);
 306   2          length = set_zigbee_uart_byte(length,value >> 24);
 307   2          length = set_zigbee_uart_byte(length,value >> 16);
 308   2          length = set_zigbee_uart_byte(length,value >> 8);
 309   2          length = set_zigbee_uart_byte(length,value & 0xff);
 310   2        }    
 311   1        
 312   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 313   1      
 314   1        return SUCCESS;
 315   1      }
 316          
 317          /**
 318          * @brief report raw type DP data to zigbee module 
 319          * @param[in]  {dpid}  dp id
 320          * @param[in]  {value} Data contents of dp 
 321          * @param[in]  {len} length of Data contents  
 322          * @return send result 
 323          */
 324          unsigned char mcu_dp_raw_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 325          {
 326   1        unsigned short length = 0;
 327   1        
 328   1        length = set_zigbee_uart_byte(length,dpid);
 329   1        length = set_zigbee_uart_byte(length,DP_TYPE_RAW);
 330   1        //
 331   1        length = set_zigbee_uart_byte(length,len / 0x100);
 332   1        length = set_zigbee_uart_byte(length,len % 0x100);
 333   1        //
 334   1        length = set_zigbee_uart_buffer(length,(unsigned char *)value,len);
 335   1        
 336   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 337   1        
 338   1        return SUCCESS;
 339   1      }
 340          
 341          /**
 342          * @brief report string type DP data to zigbee module 
 343          * @param[in]  {dpid}  dp id
 344          * @param[in]  {value} Data contents of dp 
 345          * @param[in]  {len} length of Data contents  
 346          * @return send result 
 347          */
 348          unsigned char mcu_dp_string_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 349          {
 350   1        unsigned short length = 0;
 351   1        
 352   1        length = set_zigbee_uart_byte(length,dpid);
 353   1        length = set_zigbee_uart_byte(length,DP_TYPE_STRING);
 354   1        //
 355   1        length = set_zigbee_uart_byte(length,len / 0x100);
 356   1        length = set_zigbee_uart_byte(length,len % 0x100);
 357   1        //
 358   1        length = set_zigbee_uart_buffer(length,(unsigned char *)value,len);
 359   1        
 360   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 361   1        
 362   1        return SUCCESS;
 363   1      }
 364          
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 7   

 365          /**
 366          * @brief report raw type DP data to zigbee module 
 367          * @param[in]  {dpid}  dp id
 368          * @param[in]  {value} Data contents of dp 
 369          * @return send result 
 370          */
 371          unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
 372          {
 373   1        unsigned short length = 0;
 374   1        
 375   1        length = set_zigbee_uart_byte(length,dpid);
 376   1        length = set_zigbee_uart_byte(length,DP_TYPE_VALUE);
 377   1        //
 378   1        length = set_zigbee_uart_byte(length,0);
 379   1        length = set_zigbee_uart_byte(length,4);
 380   1        //
 381   1        length = set_zigbee_uart_byte(length,value >> 24);
 382   1        length = set_zigbee_uart_byte(length,value >> 16);
 383   1        length = set_zigbee_uart_byte(length,value >> 8);
 384   1        length = set_zigbee_uart_byte(length,value & 0xff);
 385   1        
 386   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 387   1        
 388   1        return SUCCESS;
 389   1      }
 390          
 391          /**
 392          * @brief mcu get bool type value from zigbee translate 
 393          * @param[in]  {value}  data of dp
 394          * @param[in]  {len} Data length
 395          * @return  true or false
 396          */
 397          unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
 398          {
 399   1        int i;
 400   1        i = len;  
 401   1        return(value[0]);
 402   1      }
 403          
 404          /**
 405          * @brief mcu get enum type value from zigbee translate 
 406          * @param[in]  {value}  data of dp
 407          * @param[in]  {len} Data length
 408          * @return  enum data
 409          */
 410          unsigned char mcu_get_dp_download_enum(const unsigned char value[],unsigned short len)
 411          {
 412   1        int i;
 413   1        i = len;  
 414   1        return(value[0]);
 415   1      }
 416          
 417          /**
 418          * @brief mcu get value type value from zigbee translate 
 419          * @param[in]  {value}  data of dp
 420          * @param[in]  {len} Data length
 421          * @return  value data
 422          */
 423          unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
 424          {
 425   1        int i;
 426   1        i = len;  
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 8   

 427   1        return(byte_to_int(value));
 428   1      }
 429          
 430          
 431          /**
 432          * @brief mcu start zigbee module test 
 433          * @param[in]  {channel} test channel usually 11
 434          * @return void
 435          */
 436          void mcu_start_zigbee_test(unsigned char channel)
 437          {
 438   1        zigbee_uart_tx_buf[DATA_START+7] = channel; 
 439   1        zigbee_uart_write_frame(ZIGBEE_RF_TEST_CMD,1);
 440   1      }
 441          
 442          
 443          /**
 444          * @brief mcu reset zigbee module 
 445          * @param[in]  {void} 
 446          * @return void
 447          */
 448          void mcu_reset_zigbee(void)
 449          {
 450   1        unsigned short length = 0;
 451   1      
 452   1        length = set_zigbee_uart_byte(length,0);
 453   1        zigbee_uart_write_frame(ZIGBEE_CFG_CMD, length);
 454   1      }
 455          
 456          /**
 457          * @brief mcu start zigbee module 
 458          * @param[in]  {void} 
 459          * @return void
 460          */
 461          void mcu_network_start(void)
 462          {
 463   1        unsigned short length = 0;
 464   1      
 465   1        length = set_zigbee_uart_byte(length,1);
 466   1        zigbee_uart_write_frame(ZIGBEE_CFG_CMD, length);
 467   1      }
 468          
 469          /**
 470          * @brief copy receive data from uart receive interrupt
 471          * @param[in]  {value} Data received from interrupt
 472          * @return void 
 473          */
 474          void uart_receive_input(unsigned char value)
 475          {
 476   1      //  #error "please call this fuction in the interrupt fuction of serial receive, and delete this line"
 477   1      
 478   1          if(1 == queue_out - queue_in) {
 479   2              //串口接收缓存已满
 480   2          }else if((queue_in > queue_out) && ((queue_in - queue_out) >= sizeof(zigbee_uart_rx_buf))) {
 481   2              //串口接收缓存已满
 482   2          }else {
 483   2              //串口接收缓存未满
 484   2              if(queue_in >= (unsigned char *)(zigbee_uart_rx_buf + sizeof(zigbee_uart_rx_buf))) {
 485   3                  queue_in = (unsigned char *)(zigbee_uart_rx_buf);
 486   3              }
 487   2              *queue_in ++ = value;
 488   2          }
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 9   

 489   1      }
 490          
 491          
 492          /**
 493          * @brief init paramter and set rx_buf with zero
 494          * @param[in]  {void}
 495          * @return void 
 496          */
 497          void zigbee_protocol_init(void)
 498          {
 499   1        //#error "please call this fuction in main init"
 500   1      
 501   1        queue_in = (unsigned char *)zigbee_queue_buf;
 502   1        queue_out = (unsigned char *)zigbee_queue_buf;
 503   1      }
 504          
 505          /**
 506          * @brief read byte from zigbee_queue_buf array
 507          * @param[in]  {void}
 508          * @return read byte value
 509          */
 510          unsigned char Queue_Read_Byte(void)
 511          {
 512   1          unsigned char value;
 513   1          
 514   1          if(queue_out != queue_in) {
 515   2              //有数据
 516   2              if(queue_out >= (unsigned char *)(zigbee_uart_rx_buf + sizeof(zigbee_uart_rx_buf))) {
 517   3                  //数据已经到末尾
 518   3                  queue_out = (unsigned char *)(zigbee_uart_rx_buf);
 519   3              }
 520   2              
 521   2              value = *queue_out ++;   
 522   2          }
 523   1          
 524   1          return value;
 525   1      }
 526          
 527          /**
 528           * @brief  check rx buffer is empty or not
 529           * @param  Null
 530           * @return the queue state
 531           */
 532          unsigned char with_data_rxbuff(void)
 533          {
 534   1          if(queue_out != queue_in)
 535   1              return 1;
 536   1          else
 537   1              return 0;
 538   1      }
 539          
 540          
 541          /**
 542          * @brief uart receive data handle, call this function at mian loop 
 543          * @param[in]  {void}
 544          * @return void 
 545          */
 546          void zigbee_uart_service(void)
 547          {
 548   1      //#error "please call this fucntion in main while(1){}, and delete this line" 
 549   1          static unsigned short rx_in = 0;
 550   1          unsigned short offset = 0;
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 10  

 551   1          unsigned short rx_value_len = 0;  
 552   1          unsigned short protocol_version = 0, protocol_head_len = PROTOCOL_HEAD;
 553   1      
 554   1          while((rx_in < sizeof(zigbee_uart_rx_buf)) && (with_data_rxbuff() > 0)){
 555   2              zigbee_uart_rx_buf[rx_in++] = Queue_Read_Byte();
 556   2          }
 557   1      
 558   1          if(rx_in < PROTOCOL_HEAD){
 559   2              return;
 560   2          }
 561   1      
 562   1          while((rx_in - offset) >= PROTOCOL_HEAD){
 563   2              if(zigbee_uart_rx_buf[offset + HEAD_FIRST] != FIRST_FRAME_HEAD){
 564   3                  offset++;
 565   3                  continue;
 566   3              }
 567   2      
 568   2              if(zigbee_uart_rx_buf[offset + HEAD_SECOND] != SECOND_FRAME_HEAD){
 569   3                  offset++;
 570   3                  continue;
 571   3              }
 572   2      
 573   2              protocol_version = zigbee_uart_rx_buf[offset + PROTOCOL_VERSION];
 574   2      
 575   2             if(protocol_version != SERIAL_PROTOCOL_VER) /*version 2 is more than two byte  sequence number than
             - version 1*/
 576   2              {
 577   3                  offset += 2; 
 578   3                  continue;
 579   3              }
 580   2      
 581   2              rx_value_len =  zigbee_uart_rx_buf[offset + LENGTH_HIGH ] * 0x100;
 582   2              rx_value_len += (zigbee_uart_rx_buf[offset + LENGTH_LOW] + PROTOCOL_HEAD);
 583   2      
 584   2              if(rx_value_len > sizeof(zigbee_uart_rx_buf)){
 585   3                  offset += 3;
 586   3                  continue;
 587   3              }
 588   2      
 589   2              if((rx_in - offset) < rx_value_len){
 590   3                  break;
 591   3              }
 592   2      
 593   2              if( get_check_sum((unsigned char *)zigbee_uart_rx_buf + offset, rx_value_len - 1) != zigbee_uart_r
             -x_buf[offset + rx_value_len - 1]){
 594   3                  offset += 3; 
 595   3                  continue;
 596   3              }
 597   2      
 598   2              data_handle(offset);
 599   2              offset += rx_value_len;
 600   2          }
 601   1          rx_in -= offset;
 602   1      
 603   1          if(rx_in > 0){
 604   2          if((offset == 0)  && (rx_in >= sizeof(zigbee_uart_rx_buf))){
 605   3                  offset++;
 606   3                  rx_in -= offset;
 607   3              }
 608   2          my_memcpy((char*)zigbee_uart_rx_buf, (const char *)zigbee_uart_rx_buf + offset, rx_in);
 609   2          }
 610   1      }
C51 COMPILER V9.52.0.0   MCU_API                                                           01/18/2021 13:48:16 PAGE 11  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2297    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      99
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
