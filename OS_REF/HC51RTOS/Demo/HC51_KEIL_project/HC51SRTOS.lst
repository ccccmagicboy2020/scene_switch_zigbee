C51 COMPILER V9.00   HC51SRTOS                                                             08/07/2019 16:15:44 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HC51SRTOS
OBJECT MODULE PLACED IN .\output\HC51SRTOS.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\..\RTOS\HC51SRTOS.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(..\.
                    -.\RTOS;..\..\CPU;..\HC51_KEIL_project) DEBUG OBJECTEXTEND PRINT(.\HC51SRTOS.lst) TABS(2) OBJECT(.\output\HC51SRTOS.obj)

line level    source

   1          /*****************************************************************************************  
   2           *  HC51sRTOS核心文件 
   3           * 
   4           *  Copyright (C) 2019  OKWEI 黄少
   5           *  QQ:1926929399
   6           *  2019-08-08   HC51sRTOS 
   7           *****************************************************************************************/
   8          #include "HC51SRTOS.h"
   9          
  10          /*
  11          +---------------------------------------------------------------------------------------+
  12          |函数名称:  OSSetPrioRdy                                                                |
  13          |---------------------------------------------------------------------------------------|
  14          |函数原型:  void OSSetPrioRdy(prio)                                                     |
  15          |函数功能:  任务就绪                                                                    |
  16          |入口参数:  prio 任务优先级                                                             |
  17          +---------------------------------------------------------------------------------------+
  18          */
  19          #define OSSetPrioRdy(Prio)    \
  20              {                         \
  21              OSRdyTbl |= 0x01<<Prio;   \
  22              }                                             
  23          /*
  24          +---------------------------------------------------------------------------------------+
  25          |函数名称： OSDelPrioRdy                                |
  26          |---------------------------------------------------------------------------------------|
  27          |函数原型： void OSDelPrioRdy(prio)                           |
  28          |                                           |
  29          |函数功能： 任务删除                                    |
  30          |                                           |
  31          |入口参数： prio 任务优先级                                 |
  32          +---------------------------------------------------------------------------------------+
  33          */                        
  34          #define OSDelPrioRdy(Prio)    \
  35              {                         \
  36              OSRdyTbl &= ~(0x01<<Prio);\
  37            }                          
  38          /*
  39          +---------------------------------------------------------------------------------------+
  40          |函数名称:  RTOS_TaskCreate                                                             |
  41          |---------------------------------------------------------------------------------------|
  42          |函数原型:  void RTOS_TaskCreate(void (*p_Task)(void),.......)                          |
  43          |函数功能:  建立任务                                                                    |
  44          |入口参数:  *Task：任务函数地址；*Stack：任务栈顶指针；Prio:任务优先级                  |
  45          +---------------------------------------------------------------------------------------+
  46          */
  47          void RTOS_TaskCreate(void (*p_Task)(void),STACK_TypeDef *p_Stack,PRIO_TypeDef Prio)
  48          {
  49   1          if(Prio <= OS_TASKS)
  50   1          {
  51   2              CPU_TaskCreate(p_Task,p_Stack,Prio);  //具体平台任务创建函数    
  52   2              OSSetPrioRdy(Prio);             // 在任务就绪表中登记 
  53   2          }
  54   1      }
C51 COMPILER V9.00   HC51SRTOS                                                             08/07/2019 16:15:44 PAGE 2   

  55          
  56          
  57          /*
  58          +---------------------------------------------------------------------------------------+
  59          |函数名称:  RTOS_Start                                                                  |
  60          |---------------------------------------------------------------------------------------|
  61          |函数原型:  void RTOS_Start(void)                                                       |
  62          |函数功能:  系统启动                                                                    |
  63          +---------------------------------------------------------------------------------------+
  64          */
  65          void RTOS_Start(void)
  66          {
  67   1          OSPrioCur = OSPrioHighRdy=0;   // 运行最高优先级任务
  68   1          CPU_OSStart();                 // 具体平台系统启动函数                
  69   1      }
  70          
  71          /*
  72          +---------------------------------------------------------------------------------------+
  73          |函数名称:  RTOS_TimeDelay                                                              |
  74          |---------------------------------------------------------------------------------------|
  75          |函数原型:  void RTOS_TimeDelay(TICKS_TypeDef ticks)                                    |
  76          |函数功能:  任务延时                                                                    |
  77          |入口参数:  延时的时间，任务等待时钟节拍的个数                                          |
  78          |有关说明:  延时数不得超出TICKS_TypeDef的范围                                           |
  79          +---------------------------------------------------------------------------------------+
  80          */
  81          void RTOS_TimeDelay(TICKS_TypeDef ticks)
  82          {
  83   1      TICKS_TypeDef i=0;
  84   1        if(ticks)                             //如果需要延时         
  85   1        {
  86   2          OS_ENTER_CRITICAL();
  87   2          OSDelPrioRdy(OSPrioCur);      // 把任务从就绪表中删去 
  88   2          TCB[OSPrioCur].OSTCBDly = ticks;  // 设置任务延时节拍数   
  89   2          OS_EXIT_CRITICAL();
  90   2          for( i = 0;(i < OS_TASKS) && (!(OSRdyTbl & (0x01<<i)));i++ );//查找最高优先级算法
  91   2            OSPrioHighRdy = i;  
  92   2          OSSched();                          // 任务调度
  93   2        }
  94   1      }
  95          
  96          #if(TASK_SUSPEND_EN==1) //是否启用任务挂起恢复功能
              /*
              +---------------------------------------------------------------------------------------+
              |函数名称:  RTOS_TaskSuspend                                                            |
              |---------------------------------------------------------------------------------------|
              |函数原型:  void RTOS_TaskSuspend(PRIO_TypeDef Prio)                                    |
              |函数功能:  任务挂起                                                                    |
              |入口参数:  挂起任务的优先级                                                            |
              +---------------------------------------------------------------------------------------+
              */
              void RTOS_TaskSuspend(PRIO_TypeDef Prio)
              {
                OS_ENTER_CRITICAL();
                TCB[Prio].OSTCBDly = 0;
                OSDelPrioRdy(Prio);       // 从任务就绪表上去除标志位
                OS_EXIT_CRITICAL();
                  
                if(OSPrioCur == Prio)     // 当要挂起的任务为当前任务 
                {
                  OSSched();          // 重新调度         
                } 
C51 COMPILER V9.00   HC51SRTOS                                                             08/07/2019 16:15:44 PAGE 3   

              }
              
              /*
              +---------------------------------------------------------------------------------------+
              |函数名称： RTOS_TaskResume                                                             |
              |---------------------------------------------------------------------------------------|
              |函数原型:  void RTOS_TaskResume(PRIO_TypeDef Prio)                                     |
              |函数功能:  任务恢复                                                                    |
              |入口参数:  恢复任务的优先级                                                            |
              +---------------------------------------------------------------------------------------+
              */
              void RTOS_TaskResume(PRIO_TypeDef Prio)
              {
                OS_ENTER_CRITICAL();
                OSSetPrioRdy(Prio);       // 从任务就绪表上重置标志位 
                  TCB[Prio].OSTCBDly = 0;     // 将时间计时设为0,延时到 
                OS_EXIT_CRITICAL();
                
                if(OSPrioCur > Prio)      // 当前任务的优先级低于重置位的任务的优先级 
                {
                  OSSched();          // 重新调度         
                }
                
              }
              #endif   //对应 #if(TASK_SUSPEND_EN==1)
 142          /*
 143          +---------------------------------------------------------------------------------------+
 144          |函数名称:  TickIntHook                                                                 |
 145          |---------------------------------------------------------------------------------------|
 146          |函数原型:  void TickIntHook(void)                                                      |
 147          |函数功能:  T0中断钩子程序                                                              |
 148          |有关说明:  用来为需要延时的任务进行计时                                                |
 149          +---------------------------------------------------------------------------------------+
 150          */
 151           void TickIntHook(void)
 152            {
 153   1          INT8U i;
 154   1      
 155   1          for(i = 0; i < OS_TASKS; i++)     // 刷新各任务时钟 
 156   1          {
 157   2            if(TCB[i].OSTCBDly )
 158   2            {
 159   3              TCB[i].OSTCBDly --;
 160   3              if(TCB[i].OSTCBDly == 0)    // 当任务时钟到时,必须是由定时器减时的才行
 161   3              {
 162   4                OSSetPrioRdy(i);        // 使任务可以重新运行   
 163   4              }
 164   3            }
 165   2          }
 166   1          for( i = 0;(i < OS_TASKS) && (!(OSRdyTbl & (0x01<<i)));i++ );//查找最高优先级算法
 167   1            OSPrioHighRdy = i;  
 168   1      } 
 169          
 170          /*
 171          +---------------------------------------------------------------------------------------+
 172          |函数名称:  IdleTask                                                                    |
 173          |---------------------------------------------------------------------------------------|
 174          |函数原型:  void IdleTask(void)                                                         |
 175          |函数功能:  空闲任务                                                                    |
 176          |有关说明:  空闲任务必须永远处于就绪状态                                                |
 177          +---------------------------------------------------------------------------------------+
 178          */
C51 COMPILER V9.00   HC51SRTOS                                                             08/07/2019 16:15:44 PAGE 4   

 179          void Idle_Task(void)
 180          { 
 181   1        IdleCount = 0;
 182   1        while(1)
 183   1          IdleCount++;
 184   1      }
 185          
 186          /*
 187          +---------------------------------------------------------------------------------------+
 188          |函数名称:  RTOS_Init                                                                   |
 189          |---------------------------------------------------------------------------------------|
 190          |函数原型:  void RTOS_Init(void)                                                        |
 191          |函数功能:  初始化系统全局变量                                                          |
 192          +---------------------------------------------------------------------------------------+
 193          */
 194          void RTOS_Init(void)
 195          {
 196   1        OSRdyTbl = 0;
 197   1        OSPrioCur = OSPrioHighRdy = OS_TASKS;
 198   1      }
 199          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
